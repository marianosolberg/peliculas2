{"ast":null,"code":"var _jsxFileName = \"/home/mariano/movies-curso-react/src/components/search/Search.jsx\",\n    _s = $RefreshSig$();\n\nimport styles from \"./Search.module.css\";\nimport { FaSearch } from \"react-icons/fa\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useQuery } from \"../../hooks/useQuery\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Search({\n  data\n}) {\n  _s();\n\n  const query = useQuery();\n  const search = query.get(\"search\");\n  const [searchText, setSearchText] = useState(\"\");\n  const [error, setError] = useState(initialState);\n  const history = useHistory(); //el useHistory me permite añadirle un nuevo elemento a la ruta\n  //tiene path /search / hash/ state /key , usamos el search\n  //usamos el hook nos traemos la funcion, la ejecutamos  y la palabra clave que queremos\n  //buscar la ponemos   const search = query.get(\"search\") o const clave = query.get(\"clave\");\n  //si hay search se setea el searchText sino se pone el default las comillas vacias\n\n  useEffect(() => {\n    setSearchText(search || \"\");\n  }, [search]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    history.push(\"/?search=\" + searchText);\n    setSearchText(\"\");\n  };\n\n  console.log(searchText);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: styles.searchContainer,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.searchBox,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: styles.searchInput,\n          type: \"text\",\n          value: searchText,\n          onChange: e => setSearchText(e.target.value) //vamos a setear el estado  del search con el valor que tomo en el value del input\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.searchButton,\n          type: \"submit\",\n          children: /*#__PURE__*/_jsxDEV(FaSearch, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"movie does no exist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Search, \"IGsI6ma4AQae7CED2xklfJk7UZM=\", false, function () {\n  return [useQuery, useHistory];\n});\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/mariano/movies-curso-react/src/components/search/Search.jsx"],"names":["styles","FaSearch","useEffect","useState","useHistory","useQuery","Search","data","query","search","get","searchText","setSearchText","error","setError","initialState","history","handleSubmit","e","preventDefault","push","console","log","searchContainer","searchBox","searchInput","target","value","searchButton"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,QAAT,QAAyB,sBAAzB;;;AAEA,OAAO,SAASC,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA0B;AAAA;;AAC/B,QAAMC,KAAK,GAAGH,QAAQ,EAAtB;AACA,QAAMI,MAAM,GAAGD,KAAK,CAACE,GAAN,CAAU,QAAV,CAAf;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACY,YAAD,CAAlC;AAEA,QAAMC,OAAO,GAAGZ,UAAU,EAA1B,CAP+B,CAQ/B;AACA;AACA;AACA;AAEA;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,aAAa,CAACH,MAAM,IAAI,EAAX,CAAb;AACD,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;;AAIA,QAAMQ,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,OAAO,CAACI,IAAR,CAAa,cAAcT,UAA3B;AACAC,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAJD;;AAMAS,EAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;AACA,sBACE;AAAA,4BACE;AAAM,MAAA,SAAS,EAAEX,MAAM,CAACuB,eAAxB;AAAyC,MAAA,QAAQ,EAAEN,YAAnD;AAAA,6BACE;AAAK,QAAA,SAAS,EAAEjB,MAAM,CAACwB,SAAvB;AAAA,gCACE;AACE,UAAA,SAAS,EAAExB,MAAM,CAACyB,WADpB;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,KAAK,EAAEd,UAHT;AAIE,UAAA,QAAQ,EAAGO,CAAD,IAAON,aAAa,CAACM,CAAC,CAACQ,MAAF,CAASC,KAAV,CAJhC,CAKE;;AALF;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAQ,UAAA,SAAS,EAAE3B,MAAM,CAAC4B,YAA1B;AAAwC,UAAA,IAAI,EAAC,QAA7C;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,IAAI,EAAE;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA,kBADF;AAqBD;;GA9CetB,M;UACAD,Q,EAMED,U;;;KAPFE,M","sourcesContent":["import styles from \"./Search.module.css\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useQuery } from \"../../hooks/useQuery\";\r\n\r\nexport function Search({ data }) {\r\n  const query = useQuery();\r\n  const search = query.get(\"search\");\r\n\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [error, setError] = useState(initialState);\r\n\r\n  const history = useHistory();\r\n  //el useHistory me permite añadirle un nuevo elemento a la ruta\r\n  //tiene path /search / hash/ state /key , usamos el search\r\n  //usamos el hook nos traemos la funcion, la ejecutamos  y la palabra clave que queremos\r\n  //buscar la ponemos   const search = query.get(\"search\") o const clave = query.get(\"clave\");\r\n\r\n  //si hay search se setea el searchText sino se pone el default las comillas vacias\r\n  useEffect(() => {\r\n    setSearchText(search || \"\");\r\n  }, [search]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    history.push(\"/?search=\" + searchText);\r\n    setSearchText(\"\");\r\n  };\r\n\r\n  console.log(searchText);\r\n  return (\r\n    <>\r\n      <form className={styles.searchContainer} onSubmit={handleSubmit}>\r\n        <div className={styles.searchBox}>\r\n          <input\r\n            className={styles.searchInput}\r\n            type=\"text\"\r\n            value={searchText}\r\n            onChange={(e) => setSearchText(e.target.value)}\r\n            //vamos a setear el estado  del search con el valor que tomo en el value del input\r\n          />\r\n          <button className={styles.searchButton} type=\"submit\">\r\n            <FaSearch size={20} />\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <div>\r\n        <h1>movie does no exist</h1>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}